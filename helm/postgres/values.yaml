---
# For a full explanation of how to set up the custom resource, please refer to
# the documentation:
#    https://access.crunchydata.com/documentation/postgres-operator/v5/

###########
# General #
###########

# name is the name of the cluster. This defaults to the name of the Helm
# release.
name: hippo

# postgresVersion sets the version to deploy. This version number needs to be
# available as one of the "RELATED_IMAGE_POSTGRES_..." images as part of the PGO
# installation if you want to deploy the image without setting the "postgres"
# image variable. This value is required.
postgresVersion: 15

# postGISVersion if set and coupled with a PostGIS enabled container, enables
# PostGIS. This version number needs to be available as one of the
# "RELATED_IMAGE_POSTGRES_..." images as part of the PGO installation if you
# want to deploy the image without setting the "postgres" image variable.
# postGISVersion: 3.1

# NOTE: pgBackRest is enabled by default. It must be set in
# "RELATED_IMAGE_PGBACKREST" on the PGO deployment, otherwise you will need to
# override the "pgBackRest" image.

# pgBouncerReplicas sets the number of pgBouncer instances to deploy. The
# default is 0. You need to set this to at least 1 to deploy pgBouncer or set
# "pgBouncerConfig". Setting "pgBouncerConfig" will override the value of
# pgBouncerReplicas. The "RELATED_IMAGE_PGBOUNCER" in the PGO deployment must be
# set if you want to enable this without explicitly setting "pgBouncer".
# pgBouncerReplicas: 1

# monitoring enables the ability to monitor the Postgres cluster through a
# metrics exporter that can be scraped by Prometheus. This defaults to the value
# below.
# monitoring: false

###################
# Image Overrides #
###################

# imagePostgres can be a Postgres or GIS-enabled Postgres image. This defaults to the
# below value. "postgresVersion" needs to match the version of Postgres that is
# used here. If using the GIS-enabled Postgres image, you need to ensure
# "postGISVersion" matches the version of PostGIS used.
imagePostgres: core.harbor.zlidc.mthreads.com:30003/crunchydata/crunchy-postgres:ubi8-15.3-0

# imagePgBackRest is the pgBackRest backup utility image. This defaults to the
# below value.
imagePgBackRest: core.harbor.zlidc.mthreads.com:30003/crunchydata/crunchy-pgbackrest:ubi8-2.45-0

# imagePgBouncer is the image for the PgBouncer connection pooler. This defaults
# to the below value.
# imagePgBouncer: core.harbor.zlidc.mthreads.com:30003/crunchydata/crunchy-pgbouncer:ubi8-1.22-0

# imageExporter is the image name for the exporter used as a part of monitoring.
# This defaults to the value below.
imageExporter: core.harbor.zlidc.mthreads.com:30003/crunchydata/crunchy-postgres-exporter:ubi8-5.3.2-0

###########################
# Basic Postgres Settings #
###########################

# instanceName lets you set the name of your instances. This defaults to
# the value below. Setting "instances" overrides this value.
# instanceName: instance1


##############################
# Advanced Postgres Settings #
##############################

# instances allows you to define one or more Postgres instance sets. By default,
# PGO will only deploy a single instance. Each instance set has similar
# characteristics to the other instances in the set, e.g. storage size, resource
# etc. You can have multiple replicas within an instance set.
#
# This allows you to fully customize the topology of your Postgres instances.
#
# For example, to set up an instance set with HA (due to the default pod
# topology spread constraints)
#
# instances:
#   - name: pgha1
#     replicas: 2
#     dataVolumeClaimSpec:
#       accessModes:
#       - "ReadWriteOnce"
#       resources:
#         requests:
#           storage: 1Gi
# instances: {}
instances:
  - affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              postgres-operator.crunchydata.com/cluster: hippo
              postgres-operator.crunchydata.com/instance-set: pgha
          topologyKey: kubernetes.io/hostname
    dataVolumeClaimSpec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
    name: pgha
    replicas: 1

# port sets the port that Postgres listens on. Defaults to 5432.
# port: 5432


# users sets any custom Postgres users and databases that they have  access to
# as well as any permissions associated with the user account.
users:
 -  databases:
    - postgres
    - mlflow
    - maascore
    - maas-core
    name: postgres
    options: SUPERUSER
    password:
      type: AlphaNumeric


#################################
# Backups / pgBackRest Settings #
#################################


# s3 allows for AWS S3 or an S3 compatible storage system to be used for
# backups. This allows for a quick setup with S3; if you need more advanced
# setup, use pgBackRestConfig.
s3:
#   # bucket specifies the S3 bucket to use,
  bucket: ""
#   # endpoint specifies the S3 endpoint to use.
  endpoint: ""
#   # region specifies the S3 region to use. If your S3 storage system does not
#   # use "region", fill this in with a random value.
  region: ""
#   # key is the S3 key. This is stored in a Secret.
  key: ""
#   # keySecret is the S3 key secret. This is stored in a Secret.
  keySecret: ""

#######################
# Kubernetes Settings #
#######################

# metadata contains any metadata that should be applied to all PGO managed
# objects in this Postgres cluster. This includes "annotations" and "labels" as
# sub-keys.
# metadata: {}

# service customizes the Service that exposes the Postgres primary.
service:
    metadata:
      labels:
        postgres-operator.crunchydata.com/cluster: hippo-ha
        postgres-operator.crunchydata.com/role: master
    type: NodePort

# imagePullPolicy sets the pull policy for all the images. This defaults to
# the Kubernetes heuristic:
# https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
# imagePullPolicy: IfNotPresent

# imagePullSecrets references Secrets that credentials for pulling image from
# private repositories
# imagePullSecrets: []

# disableDefaultPodScheduling if set to true, will disable any of the default
# scheduling constraints for Pods, such as the default Pod Topology Spread
# Constraints. If set to false or unset, the default scheduling constraints will
# be used in addition to any customizations that are added in.
# disableDefaultPodScheduling: false

#manual
manual:
  options:
  - --type=full
  repoName: repo1

#备份策略
schedules:
  #增量备份计划，表示在周一至周六的凌晨 2 点执行
  differential: 0 2 * * 1-6
  #完整备份计划，表示在每周日的凌晨 2 点执行
  full: 0 2 * * 0
